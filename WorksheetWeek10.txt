1. Write a method named isUnique that takes an array of integers as a parameter and 
that returns a boolean value indicating whether or not the values in the array are 
unique (true for yes, false for no). The values in the list are considered unique 
if there is no pair of values that are equal. For example, if a variable called 
list stores the following values:

int[] list = {3, 8, 12, 2, 9, 17, 43, -8, 46, 203, 14, 97, 10, 4};

Then the call of isUnique(list) should return true because there are no duplicated 
values in this list. If instead the list stored these values:

int[] list = {4, 7, 2, 3, 9, 12, -47, -19, 308, 3, 74};
Then the call should return false because the value 3 appears twice in this list. 
Notice that given this definition, a list of 0 or 1 elements would be considered 
unique.


2. Write a method named minGap that accepts an integer array as a parameter and 
returns the minimum 'gap' between adjacent values in the array. The gap between two 
adjacent values in a array is defined as the second value minus the first value. 
For example, suppose a variable called array is an array of integers that stores 
the following sequence of values.


int[] array = {1, 3, 6, 7, 12};
The first gap is 2 (3 - 1), the second gap is 3 (6 - 3), the third gap is 1 (7 - 6) 
and the fourth gap is 5 (12 - 7). Thus, the call of minGap(array) should return 1 because that is the smallest gap in the array. Notice that the minimum gap could be 
a negative number. For example, if array stores the following sequence of values:


{3, 5, 11, 4, 8}
The gaps would be computed as 2 (5 - 3), 6 (11 - 5), -7 (4 - 11), and 4 (8 - 4). Of 
these values, -7 is the smallest, so it would be returned.

This gap information can be helpful for determining other properties of the array. 
For example, if the minimum gap is greater than or equal to 0, then you know the 
array is in sorted (nondecreasing) order. If the gap is greater than 0, then you 
know the array is both sorted and unique (strictly increasing).

If you are passed an array with fewer than 2 elements, you should return 0.


3. Write a method called collapse that accepts an array of integers as a parameter 
and returns a new array containing the result of replacing each pair of integers 
with the sum of that pair. For example, if an array called list stores the values 
{7, 2, 8, 9, 4, 13, 7, 1, 9, 10}, then the call of collapse(list) should return a 
new array containing {9, 17, 17, 8, 19}. The first pair from the original list is 
collapsed into 9 (7 + 2), the second pair is collapsed into 17 (8 + 9), and so on. 
If the list stores an odd number of elements, the final element is not collapsed. 
For example, if the list had been {1, 2, 3, 4, 5}, then the call would return {3, 
7, 5}. Your method should not change the array that is passed as a parameter.


4. Write a method called kthLargest that accepts an integer k and an array a as its 
parameters and returns the element such that k elements have greater or equal 
value. If k = 0, return the largest element; if k = 1, return the second largest 
element, and so on.

For example, if the array passed contains the values {74, 85, 102, 99, 101, 56, 84} 
and the integer k passed is 2, your method should return 99 because there are two 
values at least as large as 99 (101 and 102).

Assume that 0 <= k < a.length. (Hint: Consider sorting the array, or a copy of the 
array first.)